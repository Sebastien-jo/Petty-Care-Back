openapi: 3.0.3
info:
  title: 'Petty-Care API'
  description: 'szxzx'
  version: 1.0.0
servers:
  - url: 'https://localhost:8000/api'
    description: ''
paths:
  /api/me:
    get:
      operationId: meUserCollection
      tags:
        - User
      responses:
        200:
          description: 'User collection'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/User.jsonld-read.user' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:previous': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User-read.user'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User-read.user'
      summary: 'Retrieves the collection of User resources.'
      description: 'Retrieves the collection of User resources.'
      parameters: []
      deprecated: false
      security:
        -
          bearerAuth: []
    parameters: []
  /api/pets:
    get:
      operationId: getPetCollection
      tags:
        - Pet
      responses:
        200:
          description: 'Pet collection'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Pet.jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:previous': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string, nullable: true }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
      summary: 'Retrieves the collection of Pet resources.'
      description: 'Retrieves the collection of Pet resources.'
      parameters:
        -
          name: page
          in: query
          description: 'The collection page number'
          required: false
          deprecated: false
          allowEmptyValue: true
          schema:
            type: integer
            default: 1
          style: form
          explode: false
          allowReserved: false
      deprecated: false
    post:
      operationId: postPetCollection
      tags:
        - Pet
      responses:
        201:
          description: 'Pet resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Pet.jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            text/html:
              schema:
                $ref: '#/components/schemas/Pet'
          links:
            GetPetItem:
              operationId: getPetItem
              parameters:
                id: '$response.body#/id'
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/pets/{id}`.'
        400:
          description: 'Invalid input'
        422:
          description: 'Unprocessable entity'
      summary: 'Creates a Pet resource.'
      description: 'Creates a Pet resource.'
      parameters: []
      requestBody:
        description: 'The new Pet resource'
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Pet.jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          text/html:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      deprecated: false
    parameters: []
  '/api/pets/{id}':
    get:
      operationId: getPetItem
      tags:
        - Pet
      responses:
        200:
          description: 'Pet resource'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Pet.jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            text/html:
              schema:
                $ref: '#/components/schemas/Pet'
        404:
          description: 'Resource not found'
      summary: 'Retrieves a Pet resource.'
      description: 'Retrieves a Pet resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      deprecated: false
    put:
      operationId: putPetItem
      tags:
        - Pet
      responses:
        200:
          description: 'Pet resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Pet.jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            text/html:
              schema:
                $ref: '#/components/schemas/Pet'
          links:
            GetPetItem:
              operationId: getPetItem
              parameters:
                id: '$response.body#/id'
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/pets/{id}`.'
        400:
          description: 'Invalid input'
        422:
          description: 'Unprocessable entity'
        404:
          description: 'Resource not found'
      summary: 'Replaces the Pet resource.'
      description: 'Replaces the Pet resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      requestBody:
        description: 'The updated Pet resource'
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Pet.jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          text/html:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      deprecated: false
    delete:
      operationId: deletePetItem
      tags:
        - Pet
      responses:
        204:
          description: 'Pet resource deleted'
        404:
          description: 'Resource not found'
      summary: 'Removes the Pet resource.'
      description: 'Removes the Pet resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      deprecated: false
    patch:
      operationId: patchPetItem
      tags:
        - Pet
      responses:
        200:
          description: 'Pet resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Pet.jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            text/html:
              schema:
                $ref: '#/components/schemas/Pet'
          links:
            GetPetItem:
              operationId: getPetItem
              parameters:
                id: '$response.body#/id'
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/pets/{id}`.'
        400:
          description: 'Invalid input'
        422:
          description: 'Unprocessable entity'
        404:
          description: 'Resource not found'
      summary: 'Updates the Pet resource.'
      description: 'Updates the Pet resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      requestBody:
        description: 'The updated Pet resource'
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      deprecated: false
    parameters: []
  /api/register:
    post:
      operationId: register2UserItem
      tags:
        - User
      responses:
        201:
          description: 'User resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User.jsonld-read.user'
            application/json:
              schema:
                $ref: '#/components/schemas/User-read.user'
            text/html:
              schema:
                $ref: '#/components/schemas/User-read.user'
          links:
            GetUserItem:
              operationId: getUserItem
              parameters:
                id: '$response.body#/id'
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/users/{id}`.'
        400:
          description: 'Invalid input'
        422:
          description: 'Unprocessable entity'
        404:
          description: 'Resource not found'
      summary: 'Creates a User resource.'
      description: 'Creates a User resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      requestBody:
        description: 'The new User resource'
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/User.jsonld-write.user'
          application/json:
            schema:
              $ref: '#/components/schemas/User-write.user'
          text/html:
            schema:
              $ref: '#/components/schemas/User-write.user'
        required: true
      deprecated: false
    parameters: []
  '/api/users/{id}':
    get:
      operationId: getUserItem
      tags:
        - User
      responses:
        204:
          description: 'User resource'
          content:
            application/ld+json:
              schema: {  }
            application/json:
              schema: {  }
            text/html:
              schema: {  }
        404:
          description: 'Resource not found'
      summary: 'Retrieves a User resource.'
      description: 'Retrieves a User resource.'
      parameters:
        -
          name: id
          in: path
          description: 'Resource identifier'
          required: true
          deprecated: false
          allowEmptyValue: false
          schema:
            type: string
          style: simple
          explode: false
          allowReserved: false
      deprecated: false
    parameters: []
components:
  schemas:
    Necklace:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        date_of_purchase:
          readOnly: true
          type: string
          format: date-time
          nullable: true
        pet:
          type: string
          format: iri-reference
          nullable: true
        dateOfPurchase:
          type: string
          format: date-time
          nullable: true
    Necklace.jsonld:
      type: object
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          type: integer
        date_of_purchase:
          readOnly: true
          type: string
          format: date-time
          nullable: true
        pet:
          type: string
          format: iri-reference
          nullable: true
        dateOfPurchase:
          type: string
          format: date-time
          nullable: true
    Pet:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        name:
          type: string
        weight:
          type: number
          nullable: true
        age:
          type: integer
          nullable: true
        steps:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        activity_time:
          readOnly: true
          type: integer
          nullable: true
        picture:
          type: string
          nullable: true
        user:
          type: string
          format: iri-reference
        necklace:
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Necklace'
        activityTime:
          type: integer
          nullable: true
    Pet.jsonld:
      type: object
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          type: integer
        name:
          type: string
        weight:
          type: number
          nullable: true
        age:
          type: integer
          nullable: true
        steps:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        activity_time:
          readOnly: true
          type: integer
          nullable: true
        picture:
          type: string
          nullable: true
        user:
          type: string
          format: iri-reference
        necklace:
          nullable: true
          anyOf:
            -
              $ref: '#/components/schemas/Necklace.jsonld'
        activityTime:
          type: integer
          nullable: true
    Toy-read.user:
      type: object
    Toy.jsonld-read.user:
      type: object
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
    User-read.user:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
          nullable: true
        pets:
          type: array
          items:
            type: string
            format: iri-reference
        toys:
          type: array
          items:
            $ref: '#/components/schemas/Toy-read.user'
    User-write.user:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
          nullable: true
    User.jsonld-read.user:
      type: object
      properties:
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        id:
          readOnly: true
          type: integer
        email:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
          nullable: true
        pets:
          type: array
          items:
            type: string
            format: iri-reference
        toys:
          type: array
          items:
            $ref: '#/components/schemas/Toy.jsonld-read.user'
    User.jsonld-write.user:
      type: object
      properties:
        '@context':
          readOnly: true
          oneOf:
            -
              type: string
            -
              type: object
              properties:
                '@vocab':
                  type: string
                hydra:
                  type: string
                  enum: ['http://www.w3.org/ns/hydra/core#']
              required:
                - '@vocab'
                - hydra
              additionalProperties: true
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        email:
          type: string
        password:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
          nullable: true
    Credentials:
      type: object
      properties:
        email:
          type: string
          example: john@doe.fr
        password:
          type: string
  responses: {  }
  parameters: {  }
  examples: {  }
  requestBodies: {  }
  headers: {  }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: []
tags: []
